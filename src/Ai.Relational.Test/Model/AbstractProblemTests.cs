/* 
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Ai.Relational.Api;
using Ai.Relational.Model;
using Ai.Relational.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Ai.Relational.Test
{
    /// <summary>
    ///  Class for testing AbstractProblem
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class AbstractProblemTests
    {
        // TODO uncomment below to declare an instance variable for AbstractProblem
        //private AbstractProblem instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of AbstractProblem
            //instance = new AbstractProblem();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AbstractProblem
        /// </summary>
        [Test]
        public void AbstractProblemInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOf" AbstractProblem
            //Assert.IsInstanceOf(typeof(AbstractProblem), instance);
        }

        /// <summary>
        /// Test deserialize a ClientProblem from type AbstractProblem
        /// </summary>
        [Test]
        public void ClientProblemDeserializeFromAbstractProblemTest()
        {
            // TODO uncomment below to test deserialize a ClientProblem from type AbstractProblem
            //Assert.IsInstanceOf(typeof(AbstractProblem), JsonConvert.DeserializeObject<AbstractProblem>(new ClientProblem().ToJson()));
        }
        /// <summary>
        /// Test deserialize a SyntaxError from type AbstractProblem
        /// </summary>
        [Test]
        public void SyntaxErrorDeserializeFromAbstractProblemTest()
        {
            // TODO uncomment below to test deserialize a SyntaxError from type AbstractProblem
            //Assert.IsInstanceOf(typeof(AbstractProblem), JsonConvert.DeserializeObject<AbstractProblem>(new SyntaxError().ToJson()));
        }
        /// <summary>
        /// Test deserialize a UndefinedError from type AbstractProblem
        /// </summary>
        [Test]
        public void UndefinedErrorDeserializeFromAbstractProblemTest()
        {
            // TODO uncomment below to test deserialize a UndefinedError from type AbstractProblem
            //Assert.IsInstanceOf(typeof(AbstractProblem), JsonConvert.DeserializeObject<AbstractProblem>(new UndefinedError().ToJson()));
        }
        /// <summary>
        /// Test deserialize a WorkspaceLoadProblem from type AbstractProblem
        /// </summary>
        [Test]
        public void WorkspaceLoadProblemDeserializeFromAbstractProblemTest()
        {
            // TODO uncomment below to test deserialize a WorkspaceLoadProblem from type AbstractProblem
            //Assert.IsInstanceOf(typeof(AbstractProblem), JsonConvert.DeserializeObject<AbstractProblem>(new WorkspaceLoadProblem().ToJson()));
        }
        /// <summary>
        /// Test deserialize a IntegrityConstraintViolation from type AbstractProblem
        /// </summary>
        [Test]
        public void IntegrityConstraintViolationDeserializeFromAbstractProblemTest()
        {
            // TODO uncomment below to test deserialize a IntegrityConstraintViolation from type AbstractProblem
            //Assert.IsInstanceOf(typeof(AbstractProblem), JsonConvert.DeserializeObject<AbstractProblem>(new IntegrityConstraintViolation().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ExceptionProblem from type AbstractProblem
        /// </summary>
        [Test]
        public void ExceptionProblemDeserializeFromAbstractProblemTest()
        {
            // TODO uncomment below to test deserialize a ExceptionProblem from type AbstractProblem
            //Assert.IsInstanceOf(typeof(AbstractProblem), JsonConvert.DeserializeObject<AbstractProblem>(new ExceptionProblem().ToJson()));
        }
        /// <summary>
        /// Test deserialize a OutputProblem from type AbstractProblem
        /// </summary>
        [Test]
        public void OutputProblemDeserializeFromAbstractProblemTest()
        {
            // TODO uncomment below to test deserialize a OutputProblem from type AbstractProblem
            //Assert.IsInstanceOf(typeof(AbstractProblem), JsonConvert.DeserializeObject<AbstractProblem>(new OutputProblem().ToJson()));
        }
        /// <summary>
        /// Test deserialize a PersistProblem from type AbstractProblem
        /// </summary>
        [Test]
        public void PersistProblemDeserializeFromAbstractProblemTest()
        {
            // TODO uncomment below to test deserialize a PersistProblem from type AbstractProblem
            //Assert.IsInstanceOf(typeof(AbstractProblem), JsonConvert.DeserializeObject<AbstractProblem>(new PersistProblem().ToJson()));
        }
        /// <summary>
        /// Test deserialize a IntegrityConstraintProblem from type AbstractProblem
        /// </summary>
        [Test]
        public void IntegrityConstraintProblemDeserializeFromAbstractProblemTest()
        {
            // TODO uncomment below to test deserialize a IntegrityConstraintProblem from type AbstractProblem
            //Assert.IsInstanceOf(typeof(AbstractProblem), JsonConvert.DeserializeObject<AbstractProblem>(new IntegrityConstraintProblem().ToJson()));
        }

        /// <summary>
        /// Test the property 'Objtp'
        /// </summary>
        [Test]
        public void ObjtpTest()
        {
            // TODO unit test for the property 'Objtp'
        }

    }

}
