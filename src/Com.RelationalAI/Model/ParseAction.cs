/* 
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.RelationalAI.Client.OpenAPIDateConverter;

namespace Com.RelationalAI.Model
{
    /// <summary>
    /// ParseAction
    /// </summary>
    [DataContract]
    public partial class ParseAction : Action,  IEquatable<ParseAction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParseAction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ParseAction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParseAction" /> class.
        /// </summary>
        /// <param name="nonterm">nonterm (default to &quot;&quot;).</param>
        /// <param name="source">source (required).</param>
        public ParseAction(string nonterm = "", Source source = default(Source), string type = "") : base(type)
        {
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new InvalidDataException("source is a required property for ParseAction and cannot be null");
            }
            else
            {
                this.Source = source;
            }
            
            // use default value if no "nonterm" provided
            if (nonterm == null)
            {
                this.Nonterm = "";
            }
            else
            {
                this.Nonterm = nonterm;
            }
        }
        
        /// <summary>
        /// Gets or Sets Nonterm
        /// </summary>
        [DataMember(Name="nonterm", EmitDefaultValue=false)]
        public string Nonterm { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=true)]
        public Source Source { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParseAction {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Nonterm: ").Append(Nonterm).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParseAction);
        }

        /// <summary>
        /// Returns true if ParseAction instances are equal
        /// </summary>
        /// <param name="input">Instance of ParseAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParseAction input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Nonterm == input.Nonterm ||
                    (this.Nonterm != null &&
                    this.Nonterm.Equals(input.Nonterm))
                ) && base.Equals(input) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Nonterm != null)
                    hashCode = hashCode * 59 + this.Nonterm.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
