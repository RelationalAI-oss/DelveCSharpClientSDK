/* 
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.RelationalAI.Client.OpenAPIDateConverter;

namespace Com.RelationalAI.Model
{
    /// <summary>
    /// UpdateAction
    /// </summary>
    [DataContract]
    public partial class UpdateAction : Action,  IEquatable<UpdateAction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateAction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAction" /> class.
        /// </summary>
        /// <param name="delta">delta.</param>
        /// <param name="rel">rel (required).</param>
        /// <param name="updates">updates.</param>
        public UpdateAction(List<PairAnyValueAnyValue> delta = default(List<PairAnyValueAnyValue>), RelKey rel = default(RelKey), List<PairAnyValueAnyValue> updates = default(List<PairAnyValueAnyValue>), string type = "") : base(type)
        {
            // to ensure "rel" is required (not null)
            if (rel == null)
            {
                throw new InvalidDataException("rel is a required property for UpdateAction and cannot be null");
            }
            else
            {
                this.Rel = rel;
            }
            
            this.Delta = delta;
            this.Updates = updates;
        }
        
        /// <summary>
        /// Gets or Sets Delta
        /// </summary>
        [DataMember(Name="delta", EmitDefaultValue=false)]
        public List<PairAnyValueAnyValue> Delta { get; set; }

        /// <summary>
        /// Gets or Sets Rel
        /// </summary>
        [DataMember(Name="rel", EmitDefaultValue=true)]
        public RelKey Rel { get; set; }

        /// <summary>
        /// Gets or Sets Updates
        /// </summary>
        [DataMember(Name="updates", EmitDefaultValue=false)]
        public List<PairAnyValueAnyValue> Updates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateAction {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Delta: ").Append(Delta).Append("\n");
            sb.Append("  Rel: ").Append(Rel).Append("\n");
            sb.Append("  Updates: ").Append(Updates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateAction);
        }

        /// <summary>
        /// Returns true if UpdateAction instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateAction input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Delta == input.Delta ||
                    this.Delta != null &&
                    input.Delta != null &&
                    this.Delta.SequenceEqual(input.Delta)
                ) && base.Equals(input) && 
                (
                    this.Rel == input.Rel ||
                    (this.Rel != null &&
                    this.Rel.Equals(input.Rel))
                ) && base.Equals(input) && 
                (
                    this.Updates == input.Updates ||
                    this.Updates != null &&
                    input.Updates != null &&
                    this.Updates.SequenceEqual(input.Updates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Delta != null)
                    hashCode = hashCode * 59 + this.Delta.GetHashCode();
                if (this.Rel != null)
                    hashCode = hashCode * 59 + this.Rel.GetHashCode();
                if (this.Updates != null)
                    hashCode = hashCode * 59 + this.Updates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
