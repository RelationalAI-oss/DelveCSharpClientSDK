/* 
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.RelationalAI.Client.OpenAPIDateConverter;

namespace Com.RelationalAI.Model
{
    /// <summary>
    /// ListEdbActionResult
    /// </summary>
    [DataContract]
    public partial class ListEdbActionResult : ActionResult,  IEquatable<ListEdbActionResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListEdbActionResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListEdbActionResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListEdbActionResult" /> class.
        /// </summary>
        /// <param name="rels">rels.</param>
        public ListEdbActionResult(List<RelKey> rels = default(List<RelKey>), string type = "") : base(type)
        {
            this.Rels = rels;
        }
        
        /// <summary>
        /// Gets or Sets Rels
        /// </summary>
        [DataMember(Name="rels", EmitDefaultValue=false)]
        public List<RelKey> Rels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListEdbActionResult {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Rels: ").Append(Rels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListEdbActionResult);
        }

        /// <summary>
        /// Returns true if ListEdbActionResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ListEdbActionResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListEdbActionResult input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Rels == input.Rels ||
                    this.Rels != null &&
                    input.Rels != null &&
                    this.Rels.SequenceEqual(input.Rels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Rels != null)
                    hashCode = hashCode * 59 + this.Rels.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
