/* 
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.RelationalAI.Client.OpenAPIDateConverter;

namespace Com.RelationalAI.Model
{
    /// <summary>
    /// Range
    /// </summary>
    [DataContract]
    public partial class Range :  IEquatable<Range>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Range for value: Range
            /// </summary>
            [EnumMember(Value = "Range")]
            Range = 1

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Range" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Range() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Range" /> class.
        /// </summary>
        /// <param name="area">area (required).</param>
        /// <param name="endByte">endByte.</param>
        /// <param name="input">input.</param>
        /// <param name="startByte">startByte.</param>
        /// <param name="type">type (required) (default to TypeEnum.Range).</param>
        public Range(Area area = default(Area), ModelInt endByte = default(ModelInt), AnyType input = default(AnyType), ModelInt startByte = default(ModelInt), TypeEnum type = TypeEnum.Range)
        {
            // to ensure "area" is required (not null)
            if (area == null)
            {
                throw new InvalidDataException("area is a required property for Range and cannot be null");
            }
            else
            {
                this.Area = area;
            }
            
            this.Input = input;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Range and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            
            this.EndByte = endByte;
            this.Input = input;
            this.StartByte = startByte;
        }
        
        /// <summary>
        /// Gets or Sets Area
        /// </summary>
        [DataMember(Name="area", EmitDefaultValue=true)]
        public Area Area { get; set; }

        /// <summary>
        /// Gets or Sets EndByte
        /// </summary>
        [DataMember(Name="end_byte", EmitDefaultValue=false)]
        public ModelInt EndByte { get; set; }

        /// <summary>
        /// Gets or Sets Input
        /// </summary>
        [DataMember(Name="input", EmitDefaultValue=true)]
        public AnyType Input { get; set; }

        /// <summary>
        /// Gets or Sets StartByte
        /// </summary>
        [DataMember(Name="start_byte", EmitDefaultValue=false)]
        public ModelInt StartByte { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Range {\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  EndByte: ").Append(EndByte).Append("\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  StartByte: ").Append(StartByte).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Range);
        }

        /// <summary>
        /// Returns true if Range instances are equal
        /// </summary>
        /// <param name="input">Instance of Range to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Range input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Area == input.Area ||
                    (this.Area != null &&
                    this.Area.Equals(input.Area))
                ) && 
                (
                    this.EndByte == input.EndByte ||
                    (this.EndByte != null &&
                    this.EndByte.Equals(input.EndByte))
                ) && 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.StartByte == input.StartByte ||
                    (this.StartByte != null &&
                    this.StartByte.Equals(input.StartByte))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Area != null)
                    hashCode = hashCode * 59 + this.Area.GetHashCode();
                if (this.EndByte != null)
                    hashCode = hashCode * 59 + this.EndByte.GetHashCode();
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.StartByte != null)
                    hashCode = hashCode * 59 + this.StartByte.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
