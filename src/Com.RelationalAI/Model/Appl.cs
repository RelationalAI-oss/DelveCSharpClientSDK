/* 
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.RelationalAI.Client.OpenAPIDateConverter;

namespace Com.RelationalAI.Model
{
    /// <summary>
    /// Appl
    /// </summary>
    [DataContract]
    public partial class Appl : SyntaxNode,  IEquatable<Appl>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Appl" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Appl() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Appl" /> class.
        /// </summary>
        /// <param name="arguments">arguments.</param>
        /// <param name="error">error (default to false).</param>
        /// <param name="missing">missing (default to false).</param>
        /// <param name="range">range (required).</param>
        /// <param name="symbol">symbol (default to &quot;&quot;).</param>
        public Appl(List<SyntaxNode> arguments = default(List<SyntaxNode>), bool error = false, bool missing = false, Range range = default(Range), string symbol = "", string type = "") : base(type)
        {
            // to ensure "range" is required (not null)
            if (range == null)
            {
                throw new InvalidDataException("range is a required property for Appl and cannot be null");
            }
            else
            {
                this.Range = range;
            }
            
            this.Arguments = arguments;
            // use default value if no "error" provided
            if (error == null)
            {
                this.Error = false;
            }
            else
            {
                this.Error = error;
            }
            // use default value if no "missing" provided
            if (missing == null)
            {
                this.Missing = false;
            }
            else
            {
                this.Missing = missing;
            }
            // use default value if no "symbol" provided
            if (symbol == null)
            {
                this.Symbol = "";
            }
            else
            {
                this.Symbol = symbol;
            }
        }
        
        /// <summary>
        /// Gets or Sets Arguments
        /// </summary>
        [DataMember(Name="arguments", EmitDefaultValue=false)]
        public List<SyntaxNode> Arguments { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public bool Error { get; set; }

        /// <summary>
        /// Gets or Sets Missing
        /// </summary>
        [DataMember(Name="missing", EmitDefaultValue=false)]
        public bool Missing { get; set; }

        /// <summary>
        /// Gets or Sets Range
        /// </summary>
        [DataMember(Name="range", EmitDefaultValue=true)]
        public Range Range { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Appl {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Arguments: ").Append(Arguments).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Missing: ").Append(Missing).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Appl);
        }

        /// <summary>
        /// Returns true if Appl instances are equal
        /// </summary>
        /// <param name="input">Instance of Appl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Appl input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Arguments == input.Arguments ||
                    this.Arguments != null &&
                    input.Arguments != null &&
                    this.Arguments.SequenceEqual(input.Arguments)
                ) && base.Equals(input) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && base.Equals(input) && 
                (
                    this.Missing == input.Missing ||
                    (this.Missing != null &&
                    this.Missing.Equals(input.Missing))
                ) && base.Equals(input) && 
                (
                    this.Range == input.Range ||
                    (this.Range != null &&
                    this.Range.Equals(input.Range))
                ) && base.Equals(input) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Arguments != null)
                    hashCode = hashCode * 59 + this.Arguments.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.Missing != null)
                    hashCode = hashCode * 59 + this.Missing.GetHashCode();
                if (this.Range != null)
                    hashCode = hashCode * 59 + this.Range.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
