/* 
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.RelationalAI.Client.OpenAPIDateConverter;

namespace Com.RelationalAI.Model
{
    /// <summary>
    /// ClientProblem
    /// </summary>
    [DataContract]
    public partial class ClientProblem : AbstractProblem,  IEquatable<ClientProblem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientProblem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClientProblem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientProblem" /> class.
        /// </summary>
        /// <param name="errorCode">errorCode (default to &quot;&quot;).</param>
        /// <param name="isError">isError (default to false).</param>
        /// <param name="isException">isException (default to false).</param>
        /// <param name="message">message (default to &quot;&quot;).</param>
        /// <param name="path">path (default to &quot;&quot;).</param>
        /// <param name="report">report (default to &quot;&quot;).</param>
        public ClientProblem(string errorCode = "", bool isError = false, bool isException = false, string message = "", string path = "", string report = "", string type = "") : base(type)
        {
            // use default value if no "errorCode" provided
            if (errorCode == null)
            {
                this.ErrorCode = "";
            }
            else
            {
                this.ErrorCode = errorCode;
            }
            // use default value if no "isError" provided
            if (isError == null)
            {
                this.IsError = false;
            }
            else
            {
                this.IsError = isError;
            }
            // use default value if no "isException" provided
            if (isException == null)
            {
                this.IsException = false;
            }
            else
            {
                this.IsException = isException;
            }
            // use default value if no "message" provided
            if (message == null)
            {
                this.Message = "";
            }
            else
            {
                this.Message = message;
            }
            // use default value if no "path" provided
            if (path == null)
            {
                this.Path = "";
            }
            else
            {
                this.Path = path;
            }
            // use default value if no "report" provided
            if (report == null)
            {
                this.Report = "";
            }
            else
            {
                this.Report = report;
            }
        }
        
        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name="error_code", EmitDefaultValue=false)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// Gets or Sets IsError
        /// </summary>
        [DataMember(Name="is_error", EmitDefaultValue=false)]
        public bool IsError { get; set; }

        /// <summary>
        /// Gets or Sets IsException
        /// </summary>
        [DataMember(Name="is_exception", EmitDefaultValue=false)]
        public bool IsException { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Report
        /// </summary>
        [DataMember(Name="report", EmitDefaultValue=false)]
        public string Report { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClientProblem {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  IsError: ").Append(IsError).Append("\n");
            sb.Append("  IsException: ").Append(IsException).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Report: ").Append(Report).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClientProblem);
        }

        /// <summary>
        /// Returns true if ClientProblem instances are equal
        /// </summary>
        /// <param name="input">Instance of ClientProblem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientProblem input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && base.Equals(input) && 
                (
                    this.IsError == input.IsError ||
                    (this.IsError != null &&
                    this.IsError.Equals(input.IsError))
                ) && base.Equals(input) && 
                (
                    this.IsException == input.IsException ||
                    (this.IsException != null &&
                    this.IsException.Equals(input.IsException))
                ) && base.Equals(input) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && base.Equals(input) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && base.Equals(input) && 
                (
                    this.Report == input.Report ||
                    (this.Report != null &&
                    this.Report.Equals(input.Report))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                if (this.IsError != null)
                    hashCode = hashCode * 59 + this.IsError.GetHashCode();
                if (this.IsException != null)
                    hashCode = hashCode * 59 + this.IsException.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Report != null)
                    hashCode = hashCode * 59 + this.Report.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
