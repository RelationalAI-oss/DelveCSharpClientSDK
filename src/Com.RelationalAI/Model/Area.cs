/* 
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.RelationalAI.Client.OpenAPIDateConverter;

namespace Com.RelationalAI.Model
{
    /// <summary>
    /// Area
    /// </summary>
    [DataContract]
    public partial class Area :  IEquatable<Area>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Area for value: Area
            /// </summary>
            [EnumMember(Value = "Area")]
            Area = 1

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Area" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Area() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Area" /> class.
        /// </summary>
        /// <param name="endPoint">endPoint (required).</param>
        /// <param name="startPoint">startPoint (required).</param>
        /// <param name="type">type (required) (default to TypeEnum.Area).</param>
        public Area(Point endPoint = default(Point), Point startPoint = default(Point), TypeEnum type = TypeEnum.Area)
        {
            // to ensure "endPoint" is required (not null)
            if (endPoint == null)
            {
                throw new InvalidDataException("endPoint is a required property for Area and cannot be null");
            }
            else
            {
                this.EndPoint = endPoint;
            }
            
            // to ensure "startPoint" is required (not null)
            if (startPoint == null)
            {
                throw new InvalidDataException("startPoint is a required property for Area and cannot be null");
            }
            else
            {
                this.StartPoint = startPoint;
            }
            
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Area and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets EndPoint
        /// </summary>
        [DataMember(Name="end_point", EmitDefaultValue=true)]
        public Point EndPoint { get; set; }

        /// <summary>
        /// Gets or Sets StartPoint
        /// </summary>
        [DataMember(Name="start_point", EmitDefaultValue=true)]
        public Point StartPoint { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Area {\n");
            sb.Append("  EndPoint: ").Append(EndPoint).Append("\n");
            sb.Append("  StartPoint: ").Append(StartPoint).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Area);
        }

        /// <summary>
        /// Returns true if Area instances are equal
        /// </summary>
        /// <param name="input">Instance of Area to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Area input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndPoint == input.EndPoint ||
                    (this.EndPoint != null &&
                    this.EndPoint.Equals(input.EndPoint))
                ) && 
                (
                    this.StartPoint == input.StartPoint ||
                    (this.StartPoint != null &&
                    this.StartPoint.Equals(input.StartPoint))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndPoint != null)
                    hashCode = hashCode * 59 + this.EndPoint.GetHashCode();
                if (this.StartPoint != null)
                    hashCode = hashCode * 59 + this.StartPoint.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
