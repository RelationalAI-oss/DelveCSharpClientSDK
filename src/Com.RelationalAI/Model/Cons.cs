/* 
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.RelationalAI.Client.OpenAPIDateConverter;

namespace Com.RelationalAI.Model
{
    /// <summary>
    /// Cons
    /// </summary>
    [DataContract]
    public partial class Cons : LinkedList,  IEquatable<Cons>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cons" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Cons() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cons" /> class.
        /// </summary>
        /// <param name="head">head (required).</param>
        /// <param name="tail">tail (required).</param>
        public Cons(SyntaxNode head = default(SyntaxNode), LinkedList tail = default(LinkedList), string type = "") : base(type)
        {
            // to ensure "head" is required (not null)
            if (head == null)
            {
                throw new InvalidDataException("head is a required property for Cons and cannot be null");
            }
            else
            {
                this.Head = head;
            }
            
            // to ensure "tail" is required (not null)
            if (tail == null)
            {
                throw new InvalidDataException("tail is a required property for Cons and cannot be null");
            }
            else
            {
                this.Tail = tail;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets Head
        /// </summary>
        [DataMember(Name="head", EmitDefaultValue=true)]
        public SyntaxNode Head { get; set; }

        /// <summary>
        /// Gets or Sets Tail
        /// </summary>
        [DataMember(Name="tail", EmitDefaultValue=true)]
        public LinkedList Tail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cons {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Head: ").Append(Head).Append("\n");
            sb.Append("  Tail: ").Append(Tail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Cons);
        }

        /// <summary>
        /// Returns true if Cons instances are equal
        /// </summary>
        /// <param name="input">Instance of Cons to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cons input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Head == input.Head ||
                    (this.Head != null &&
                    this.Head.Equals(input.Head))
                ) && base.Equals(input) && 
                (
                    this.Tail == input.Tail ||
                    (this.Tail != null &&
                    this.Tail.Equals(input.Tail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Head != null)
                    hashCode = hashCode * 59 + this.Head.GetHashCode();
                if (this.Tail != null)
                    hashCode = hashCode * 59 + this.Tail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
