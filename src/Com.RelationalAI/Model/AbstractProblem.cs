/* 
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.RelationalAI.Client.OpenAPIDateConverter;

namespace Com.RelationalAI.Model
{
    /// <summary>
    /// AbstractProblem
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "type")]
    [JsonSubtypes.KnownSubType(typeof(ClientProblem), "ClientProblem")]
    [JsonSubtypes.KnownSubType(typeof(SyntaxError), "SyntaxError")]
    [JsonSubtypes.KnownSubType(typeof(UndefinedError), "UndefinedError")]
    [JsonSubtypes.KnownSubType(typeof(WorkspaceLoadProblem), "WorkspaceLoadProblem")]
    [JsonSubtypes.KnownSubType(typeof(IntegrityConstraintViolation), "IntegrityConstraintViolation")]
    [JsonSubtypes.KnownSubType(typeof(ExceptionProblem), "ExceptionProblem")]
    [JsonSubtypes.KnownSubType(typeof(OutputProblem), "OutputProblem")]
    [JsonSubtypes.KnownSubType(typeof(PersistProblem), "PersistProblem")]
    [JsonSubtypes.KnownSubType(typeof(IntegrityConstraintProblem), "IntegrityConstraintProblem")]
    public partial class AbstractProblem :  IEquatable<AbstractProblem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AbstractProblem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AbstractProblem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AbstractProblem" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to &quot;&quot;).</param>
        public AbstractProblem(string type = "")
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for AbstractProblem and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AbstractProblem {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AbstractProblem);
        }

        /// <summary>
        /// Returns true if AbstractProblem instances are equal
        /// </summary>
        /// <param name="input">Instance of AbstractProblem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AbstractProblem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
