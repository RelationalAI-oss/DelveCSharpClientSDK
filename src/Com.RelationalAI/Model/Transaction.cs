/* 
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.RelationalAI.Client.OpenAPIDateConverter;

namespace Com.RelationalAI.Model
{
    /// <summary>
    /// Transaction
    /// </summary>
    [DataContract]
    public partial class Transaction :  IEquatable<Transaction>, IValidatableObject
    {
        /// <summary>
        /// Defines Mode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum OPEN for value: OPEN
            /// </summary>
            [EnumMember(Value = "OPEN")]
            OPEN = 1,

            /// <summary>
            /// Enum CREATE for value: CREATE
            /// </summary>
            [EnumMember(Value = "CREATE")]
            CREATE = 2,

            /// <summary>
            /// Enum CREATEOVERWRITE for value: CREATE_OVERWRITE
            /// </summary>
            [EnumMember(Value = "CREATE_OVERWRITE")]
            CREATEOVERWRITE = 3,

            /// <summary>
            /// Enum OPENORCREATE for value: OPEN_OR_CREATE
            /// </summary>
            [EnumMember(Value = "OPEN_OR_CREATE")]
            OPENORCREATE = 4

        }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode", EmitDefaultValue=true)]
        public ModeEnum Mode { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Transaction for value: Transaction
            /// </summary>
            [EnumMember(Value = "Transaction")]
            Transaction = 1

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Transaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction" /> class.
        /// </summary>
        /// <param name="abort">abort (default to false).</param>
        /// <param name="actions">actions.</param>
        /// <param name="dbname">dbname (default to &quot;&quot;).</param>
        /// <param name="mode">mode (required) (default to ModeEnum.OPEN).</param>
        /// <param name="_readonly">_readonly (default to false).</param>
        /// <param name="type">type (required) (default to TypeEnum.Transaction).</param>
        public Transaction(bool abort = false, List<LabeledAction> actions = default(List<LabeledAction>), string dbname = "", ModeEnum mode = ModeEnum.OPEN, bool _readonly = false, TypeEnum type = TypeEnum.Transaction)
        {
            // to ensure "mode" is required (not null)
            if (mode == null)
            {
                throw new InvalidDataException("mode is a required property for Transaction and cannot be null");
            }
            else
            {
                this.Mode = mode;
            }
            
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Transaction and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            
            // use default value if no "abort" provided
            if (abort == null)
            {
                this.Abort = false;
            }
            else
            {
                this.Abort = abort;
            }
            this.Actions = actions;
            // use default value if no "dbname" provided
            if (dbname == null)
            {
                this.Dbname = "";
            }
            else
            {
                this.Dbname = dbname;
            }
            // use default value if no "_readonly" provided
            if (_readonly == null)
            {
                this.Readonly = false;
            }
            else
            {
                this.Readonly = _readonly;
            }
        }
        
        /// <summary>
        /// Gets or Sets Abort
        /// </summary>
        [DataMember(Name="abort", EmitDefaultValue=false)]
        public bool Abort { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name="actions", EmitDefaultValue=false)]
        public List<LabeledAction> Actions { get; set; }

        /// <summary>
        /// Gets or Sets Dbname
        /// </summary>
        [DataMember(Name="dbname", EmitDefaultValue=false)]
        public string Dbname { get; set; }


        /// <summary>
        /// Gets or Sets Readonly
        /// </summary>
        [DataMember(Name="readonly", EmitDefaultValue=false)]
        public bool Readonly { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transaction {\n");
            sb.Append("  Abort: ").Append(Abort).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Dbname: ").Append(Dbname).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Readonly: ").Append(Readonly).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transaction);
        }

        /// <summary>
        /// Returns true if Transaction instances are equal
        /// </summary>
        /// <param name="input">Instance of Transaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Abort == input.Abort ||
                    (this.Abort != null &&
                    this.Abort.Equals(input.Abort))
                ) && 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                ) && 
                (
                    this.Dbname == input.Dbname ||
                    (this.Dbname != null &&
                    this.Dbname.Equals(input.Dbname))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.Readonly == input.Readonly ||
                    (this.Readonly != null &&
                    this.Readonly.Equals(input.Readonly))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Abort != null)
                    hashCode = hashCode * 59 + this.Abort.GetHashCode();
                if (this.Actions != null)
                    hashCode = hashCode * 59 + this.Actions.GetHashCode();
                if (this.Dbname != null)
                    hashCode = hashCode * 59 + this.Dbname.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Readonly != null)
                    hashCode = hashCode * 59 + this.Readonly.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
