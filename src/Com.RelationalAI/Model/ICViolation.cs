/* 
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.RelationalAI.Client.OpenAPIDateConverter;

namespace Com.RelationalAI.Model
{
    /// <summary>
    /// ICViolation
    /// </summary>
    [DataContract]
    public partial class ICViolation :  IEquatable<ICViolation>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum ICViolation for value: ICViolation
            /// </summary>
            [EnumMember(Value = "ICViolation")]
            ICViolation = 1

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ICViolation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ICViolation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ICViolation" /> class.
        /// </summary>
        /// <param name="relKey">relKey (required).</param>
        /// <param name="source">source (default to &quot;&quot;).</param>
        /// <param name="type">type (required) (default to TypeEnum.ICViolation).</param>
        public ICViolation(RelKey relKey = default(RelKey), string source = "", TypeEnum type = TypeEnum.ICViolation)
        {
            // to ensure "relKey" is required (not null)
            if (relKey == null)
            {
                throw new InvalidDataException("relKey is a required property for ICViolation and cannot be null");
            }
            else
            {
                this.RelKey = relKey;
            }
            
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ICViolation and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            
            // use default value if no "source" provided
            if (source == null)
            {
                this.Source = "";
            }
            else
            {
                this.Source = source;
            }
        }
        
        /// <summary>
        /// Gets or Sets RelKey
        /// </summary>
        [DataMember(Name="rel_key", EmitDefaultValue=true)]
        public RelKey RelKey { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ICViolation {\n");
            sb.Append("  RelKey: ").Append(RelKey).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ICViolation);
        }

        /// <summary>
        /// Returns true if ICViolation instances are equal
        /// </summary>
        /// <param name="input">Instance of ICViolation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ICViolation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RelKey == input.RelKey ||
                    (this.RelKey != null &&
                    this.RelKey.Equals(input.RelKey))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RelKey != null)
                    hashCode = hashCode * 59 + this.RelKey.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
