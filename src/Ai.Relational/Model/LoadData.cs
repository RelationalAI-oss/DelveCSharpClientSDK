/* 
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ai.Relational.Client.OpenAPIDateConverter;

namespace Ai.Relational.Model
{
    /// <summary>
    /// LoadData
    /// </summary>
    [DataContract]
    public partial class LoadData :  IEquatable<LoadData>, IValidatableObject
    {
        /// <summary>
        /// Defines Objtp
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjtpEnum
        {
            /// <summary>
            /// Enum LoadData for value: LoadData
            /// </summary>
            [EnumMember(Value = "LoadData")]
            LoadData = 1

        }

        /// <summary>
        /// Gets or Sets Objtp
        /// </summary>
        [DataMember(Name="objtp", EmitDefaultValue=true)]
        public ObjtpEnum Objtp { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoadData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadData" /> class.
        /// </summary>
        /// <param name="contentType">contentType (default to &quot;&quot;).</param>
        /// <param name="data">data (default to &quot;&quot;).</param>
        /// <param name="path">path (default to &quot;&quot;).</param>
        /// <param name="key">key.</param>
        /// <param name="fileSyntax">fileSyntax (required).</param>
        /// <param name="fileSchema">fileSchema (required).</param>
        /// <param name="objtp">objtp (required) (default to ObjtpEnum.LoadData).</param>
        public LoadData(string contentType = "", string data = "", string path = "", AnyValue key = default(AnyValue), FileSyntax fileSyntax = default(FileSyntax), FileSchema fileSchema = default(FileSchema), ObjtpEnum objtp = ObjtpEnum.LoadData)
        {
            // to ensure "fileSyntax" is required (not null)
            if (fileSyntax == null)
            {
                throw new InvalidDataException("fileSyntax is a required property for LoadData and cannot be null");
            }
            else
            {
                this.FileSyntax = fileSyntax;
            }
            
            // to ensure "fileSchema" is required (not null)
            if (fileSchema == null)
            {
                throw new InvalidDataException("fileSchema is a required property for LoadData and cannot be null");
            }
            else
            {
                this.FileSchema = fileSchema;
            }
            
            // to ensure "objtp" is required (not null)
            if (objtp == null)
            {
                throw new InvalidDataException("objtp is a required property for LoadData and cannot be null");
            }
            else
            {
                this.Objtp = objtp;
            }
            
            // use default value if no "contentType" provided
            if (contentType == null)
            {
                this.ContentType = "";
            }
            else
            {
                this.ContentType = contentType;
            }
            // use default value if no "data" provided
            if (data == null)
            {
                this.Data = "";
            }
            else
            {
                this.Data = data;
            }
            // use default value if no "path" provided
            if (path == null)
            {
                this.Path = "";
            }
            else
            {
                this.Path = path;
            }
            this.Key = key;
        }
        
        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name="content_type", EmitDefaultValue=false)]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public AnyValue Key { get; set; }

        /// <summary>
        /// Gets or Sets FileSyntax
        /// </summary>
        [DataMember(Name="file_syntax", EmitDefaultValue=true)]
        public FileSyntax FileSyntax { get; set; }

        /// <summary>
        /// Gets or Sets FileSchema
        /// </summary>
        [DataMember(Name="file_schema", EmitDefaultValue=true)]
        public FileSchema FileSchema { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoadData {\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  FileSyntax: ").Append(FileSyntax).Append("\n");
            sb.Append("  FileSchema: ").Append(FileSchema).Append("\n");
            sb.Append("  Objtp: ").Append(Objtp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoadData);
        }

        /// <summary>
        /// Returns true if LoadData instances are equal
        /// </summary>
        /// <param name="input">Instance of LoadData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoadData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.FileSyntax == input.FileSyntax ||
                    (this.FileSyntax != null &&
                    this.FileSyntax.Equals(input.FileSyntax))
                ) && 
                (
                    this.FileSchema == input.FileSchema ||
                    (this.FileSchema != null &&
                    this.FileSchema.Equals(input.FileSchema))
                ) && 
                (
                    this.Objtp == input.Objtp ||
                    (this.Objtp != null &&
                    this.Objtp.Equals(input.Objtp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.FileSyntax != null)
                    hashCode = hashCode * 59 + this.FileSyntax.GetHashCode();
                if (this.FileSchema != null)
                    hashCode = hashCode * 59 + this.FileSchema.GetHashCode();
                if (this.Objtp != null)
                    hashCode = hashCode * 59 + this.Objtp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
