/* 
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ai.Relational.Client.OpenAPIDateConverter;

namespace Ai.Relational.Model
{
    /// <summary>
    /// TransactionResult
    /// </summary>
    [DataContract]
    public partial class TransactionResult :  IEquatable<TransactionResult>, IValidatableObject
    {
        /// <summary>
        /// Defines Objtp
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjtpEnum
        {
            /// <summary>
            /// Enum TransactionResult for value: TransactionResult
            /// </summary>
            [EnumMember(Value = "TransactionResult")]
            TransactionResult = 1

        }

        /// <summary>
        /// Gets or Sets Objtp
        /// </summary>
        [DataMember(Name="objtp", EmitDefaultValue=true)]
        public ObjtpEnum Objtp { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionResult" /> class.
        /// </summary>
        /// <param name="output">output.</param>
        /// <param name="problems">problems.</param>
        /// <param name="actions">actions.</param>
        /// <param name="aborted">aborted (default to false).</param>
        /// <param name="objtp">objtp (required) (default to ObjtpEnum.TransactionResult).</param>
        public TransactionResult(RelDict output = default(RelDict), List<AbstractProblem> problems = default(List<AbstractProblem>), List<LabeledActionResult> actions = default(List<LabeledActionResult>), bool aborted = false, ObjtpEnum objtp = ObjtpEnum.TransactionResult)
        {
            // to ensure "objtp" is required (not null)
            if (objtp == null)
            {
                throw new InvalidDataException("objtp is a required property for TransactionResult and cannot be null");
            }
            else
            {
                this.Objtp = objtp;
            }
            
            this.Output = output;
            this.Problems = problems;
            this.Actions = actions;
            // use default value if no "aborted" provided
            if (aborted == null)
            {
                this.Aborted = false;
            }
            else
            {
                this.Aborted = aborted;
            }
        }
        
        /// <summary>
        /// Gets or Sets Output
        /// </summary>
        [DataMember(Name="output", EmitDefaultValue=false)]
        public RelDict Output { get; set; }

        /// <summary>
        /// Gets or Sets Problems
        /// </summary>
        [DataMember(Name="problems", EmitDefaultValue=false)]
        public List<AbstractProblem> Problems { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name="actions", EmitDefaultValue=false)]
        public List<LabeledActionResult> Actions { get; set; }

        /// <summary>
        /// Gets or Sets Aborted
        /// </summary>
        [DataMember(Name="aborted", EmitDefaultValue=false)]
        public bool Aborted { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionResult {\n");
            sb.Append("  Output: ").Append(Output).Append("\n");
            sb.Append("  Problems: ").Append(Problems).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Aborted: ").Append(Aborted).Append("\n");
            sb.Append("  Objtp: ").Append(Objtp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionResult);
        }

        /// <summary>
        /// Returns true if TransactionResult instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Output == input.Output ||
                    (this.Output != null &&
                    this.Output.Equals(input.Output))
                ) && 
                (
                    this.Problems == input.Problems ||
                    this.Problems != null &&
                    input.Problems != null &&
                    this.Problems.SequenceEqual(input.Problems)
                ) && 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                ) && 
                (
                    this.Aborted == input.Aborted ||
                    (this.Aborted != null &&
                    this.Aborted.Equals(input.Aborted))
                ) && 
                (
                    this.Objtp == input.Objtp ||
                    (this.Objtp != null &&
                    this.Objtp.Equals(input.Objtp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Output != null)
                    hashCode = hashCode * 59 + this.Output.GetHashCode();
                if (this.Problems != null)
                    hashCode = hashCode * 59 + this.Problems.GetHashCode();
                if (this.Actions != null)
                    hashCode = hashCode * 59 + this.Actions.GetHashCode();
                if (this.Aborted != null)
                    hashCode = hashCode * 59 + this.Aborted.GetHashCode();
                if (this.Objtp != null)
                    hashCode = hashCode * 59 + this.Objtp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
