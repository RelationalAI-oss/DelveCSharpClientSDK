/* 
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ai.Relational.Client.OpenAPIDateConverter;

namespace Ai.Relational.Model
{
    /// <summary>
    /// SyntaxError
    /// </summary>
    [DataContract]
    public partial class SyntaxError : AbstractProblem,  IEquatable<SyntaxError>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SyntaxError" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SyntaxError() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SyntaxError" /> class.
        /// </summary>
        /// <param name="node">node (required).</param>
        /// <param name="trace">trace (required).</param>
        /// <param name="next">next (required).</param>
        public SyntaxError(SyntaxNode node = default(SyntaxNode), LinkedList trace = default(LinkedList), SyntaxNode next = default(SyntaxNode), string objtp = "") : base(objtp)
        {
            // to ensure "node" is required (not null)
            if (node == null)
            {
                throw new InvalidDataException("node is a required property for SyntaxError and cannot be null");
            }
            else
            {
                this.Node = node;
            }
            
            // to ensure "trace" is required (not null)
            if (trace == null)
            {
                throw new InvalidDataException("trace is a required property for SyntaxError and cannot be null");
            }
            else
            {
                this.Trace = trace;
            }
            
            // to ensure "next" is required (not null)
            if (next == null)
            {
                throw new InvalidDataException("next is a required property for SyntaxError and cannot be null");
            }
            else
            {
                this.Next = next;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets Node
        /// </summary>
        [DataMember(Name="node", EmitDefaultValue=true)]
        public SyntaxNode Node { get; set; }

        /// <summary>
        /// Gets or Sets Trace
        /// </summary>
        [DataMember(Name="trace", EmitDefaultValue=true)]
        public LinkedList Trace { get; set; }

        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name="next", EmitDefaultValue=true)]
        public SyntaxNode Next { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SyntaxError {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  Trace: ").Append(Trace).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SyntaxError);
        }

        /// <summary>
        /// Returns true if SyntaxError instances are equal
        /// </summary>
        /// <param name="input">Instance of SyntaxError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SyntaxError input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Node == input.Node ||
                    (this.Node != null &&
                    this.Node.Equals(input.Node))
                ) && base.Equals(input) && 
                (
                    this.Trace == input.Trace ||
                    (this.Trace != null &&
                    this.Trace.Equals(input.Trace))
                ) && base.Equals(input) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Node != null)
                    hashCode = hashCode * 59 + this.Node.GetHashCode();
                if (this.Trace != null)
                    hashCode = hashCode * 59 + this.Trace.GetHashCode();
                if (this.Next != null)
                    hashCode = hashCode * 59 + this.Next.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
