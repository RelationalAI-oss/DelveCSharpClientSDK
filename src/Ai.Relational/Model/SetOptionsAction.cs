/* 
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ai.Relational.Client.OpenAPIDateConverter;

namespace Ai.Relational.Model
{
    /// <summary>
    /// SetOptionsAction
    /// </summary>
    [DataContract]
    public partial class SetOptionsAction : Action,  IEquatable<SetOptionsAction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetOptionsAction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SetOptionsAction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetOptionsAction" /> class.
        /// </summary>
        /// <param name="debug">debug (default to false).</param>
        /// <param name="debugTrace">debugTrace (default to false).</param>
        /// <param name="broken">broken (default to false).</param>
        /// <param name="silent">silent (default to false).</param>
        /// <param name="abortOnError">abortOnError (default to false).</param>
        public SetOptionsAction(bool debug = false, bool debugTrace = false, bool broken = false, bool silent = false, bool abortOnError = false, string objtp = "") : base(objtp)
        {
            // use default value if no "debug" provided
            if (debug == null)
            {
                this.Debug = false;
            }
            else
            {
                this.Debug = debug;
            }
            // use default value if no "debugTrace" provided
            if (debugTrace == null)
            {
                this.DebugTrace = false;
            }
            else
            {
                this.DebugTrace = debugTrace;
            }
            // use default value if no "broken" provided
            if (broken == null)
            {
                this.Broken = false;
            }
            else
            {
                this.Broken = broken;
            }
            // use default value if no "silent" provided
            if (silent == null)
            {
                this.Silent = false;
            }
            else
            {
                this.Silent = silent;
            }
            // use default value if no "abortOnError" provided
            if (abortOnError == null)
            {
                this.AbortOnError = false;
            }
            else
            {
                this.AbortOnError = abortOnError;
            }
        }
        
        /// <summary>
        /// Gets or Sets Debug
        /// </summary>
        [DataMember(Name="debug", EmitDefaultValue=false)]
        public bool Debug { get; set; }

        /// <summary>
        /// Gets or Sets DebugTrace
        /// </summary>
        [DataMember(Name="debug_trace", EmitDefaultValue=false)]
        public bool DebugTrace { get; set; }

        /// <summary>
        /// Gets or Sets Broken
        /// </summary>
        [DataMember(Name="broken", EmitDefaultValue=false)]
        public bool Broken { get; set; }

        /// <summary>
        /// Gets or Sets Silent
        /// </summary>
        [DataMember(Name="silent", EmitDefaultValue=false)]
        public bool Silent { get; set; }

        /// <summary>
        /// Gets or Sets AbortOnError
        /// </summary>
        [DataMember(Name="abort_on_error", EmitDefaultValue=false)]
        public bool AbortOnError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetOptionsAction {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("  DebugTrace: ").Append(DebugTrace).Append("\n");
            sb.Append("  Broken: ").Append(Broken).Append("\n");
            sb.Append("  Silent: ").Append(Silent).Append("\n");
            sb.Append("  AbortOnError: ").Append(AbortOnError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetOptionsAction);
        }

        /// <summary>
        /// Returns true if SetOptionsAction instances are equal
        /// </summary>
        /// <param name="input">Instance of SetOptionsAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetOptionsAction input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Debug == input.Debug ||
                    (this.Debug != null &&
                    this.Debug.Equals(input.Debug))
                ) && base.Equals(input) && 
                (
                    this.DebugTrace == input.DebugTrace ||
                    (this.DebugTrace != null &&
                    this.DebugTrace.Equals(input.DebugTrace))
                ) && base.Equals(input) && 
                (
                    this.Broken == input.Broken ||
                    (this.Broken != null &&
                    this.Broken.Equals(input.Broken))
                ) && base.Equals(input) && 
                (
                    this.Silent == input.Silent ||
                    (this.Silent != null &&
                    this.Silent.Equals(input.Silent))
                ) && base.Equals(input) && 
                (
                    this.AbortOnError == input.AbortOnError ||
                    (this.AbortOnError != null &&
                    this.AbortOnError.Equals(input.AbortOnError))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Debug != null)
                    hashCode = hashCode * 59 + this.Debug.GetHashCode();
                if (this.DebugTrace != null)
                    hashCode = hashCode * 59 + this.DebugTrace.GetHashCode();
                if (this.Broken != null)
                    hashCode = hashCode * 59 + this.Broken.GetHashCode();
                if (this.Silent != null)
                    hashCode = hashCode * 59 + this.Silent.GetHashCode();
                if (this.AbortOnError != null)
                    hashCode = hashCode * 59 + this.AbortOnError.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
