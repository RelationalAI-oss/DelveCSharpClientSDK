/* 
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ai.Relational.Client.OpenAPIDateConverter;

namespace Ai.Relational.Model
{
    /// <summary>
    /// OutputProblem
    /// </summary>
    [DataContract]
    public partial class OutputProblem : AbstractProblem,  IEquatable<OutputProblem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutputProblem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OutputProblem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutputProblem" /> class.
        /// </summary>
        /// <param name="name">name (default to &quot;&quot;).</param>
        /// <param name="exception">exception (default to &quot;&quot;).</param>
        /// <param name="exceptionStacktrace">exceptionStacktrace (default to &quot;&quot;).</param>
        public OutputProblem(string name = "", string exception = "", string exceptionStacktrace = "", string objtp = "") : base(objtp)
        {
            // use default value if no "name" provided
            if (name == null)
            {
                this.Name = "";
            }
            else
            {
                this.Name = name;
            }
            // use default value if no "exception" provided
            if (exception == null)
            {
                this.Exception = "";
            }
            else
            {
                this.Exception = exception;
            }
            // use default value if no "exceptionStacktrace" provided
            if (exceptionStacktrace == null)
            {
                this.ExceptionStacktrace = "";
            }
            else
            {
                this.ExceptionStacktrace = exceptionStacktrace;
            }
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Exception
        /// </summary>
        [DataMember(Name="exception", EmitDefaultValue=false)]
        public string Exception { get; set; }

        /// <summary>
        /// Gets or Sets ExceptionStacktrace
        /// </summary>
        [DataMember(Name="exception_stacktrace", EmitDefaultValue=false)]
        public string ExceptionStacktrace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OutputProblem {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Exception: ").Append(Exception).Append("\n");
            sb.Append("  ExceptionStacktrace: ").Append(ExceptionStacktrace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutputProblem);
        }

        /// <summary>
        /// Returns true if OutputProblem instances are equal
        /// </summary>
        /// <param name="input">Instance of OutputProblem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutputProblem input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && base.Equals(input) && 
                (
                    this.Exception == input.Exception ||
                    (this.Exception != null &&
                    this.Exception.Equals(input.Exception))
                ) && base.Equals(input) && 
                (
                    this.ExceptionStacktrace == input.ExceptionStacktrace ||
                    (this.ExceptionStacktrace != null &&
                    this.ExceptionStacktrace.Equals(input.ExceptionStacktrace))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Exception != null)
                    hashCode = hashCode * 59 + this.Exception.GetHashCode();
                if (this.ExceptionStacktrace != null)
                    hashCode = hashCode * 59 + this.ExceptionStacktrace.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
