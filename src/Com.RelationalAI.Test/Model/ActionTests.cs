/* 
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relational.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Com.RelationalAI.Api;
using Com.RelationalAI.Model;
using Com.RelationalAI.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Com.RelationalAI.Test
{
    /// <summary>
    ///  Class for testing Action
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ActionTests
    {
        // TODO uncomment below to declare an instance variable for Action
        //private Action instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of Action
            //instance = new Action();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Action
        /// </summary>
        [Test]
        public void ActionInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOf" Action
            //Assert.IsInstanceOf(typeof(Action), instance);
        }

        /// <summary>
        /// Test deserialize a CardinalityAction from type Action
        /// </summary>
        [Test]
        public void CardinalityActionDeserializeFromActionTest()
        {
            // TODO uncomment below to test deserialize a CardinalityAction from type Action
            //Assert.IsInstanceOf(typeof(Action), JsonConvert.DeserializeObject<Action>(new CardinalityAction().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ListSourceAction from type Action
        /// </summary>
        [Test]
        public void ListSourceActionDeserializeFromActionTest()
        {
            // TODO uncomment below to test deserialize a ListSourceAction from type Action
            //Assert.IsInstanceOf(typeof(Action), JsonConvert.DeserializeObject<Action>(new ListSourceAction().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ModifyWorkspaceAction from type Action
        /// </summary>
        [Test]
        public void ModifyWorkspaceActionDeserializeFromActionTest()
        {
            // TODO uncomment below to test deserialize a ModifyWorkspaceAction from type Action
            //Assert.IsInstanceOf(typeof(Action), JsonConvert.DeserializeObject<Action>(new ModifyWorkspaceAction().ToJson()));
        }
        /// <summary>
        /// Test deserialize a CollectProblemsAction from type Action
        /// </summary>
        [Test]
        public void CollectProblemsActionDeserializeFromActionTest()
        {
            // TODO uncomment below to test deserialize a CollectProblemsAction from type Action
            //Assert.IsInstanceOf(typeof(Action), JsonConvert.DeserializeObject<Action>(new CollectProblemsAction().ToJson()));
        }
        /// <summary>
        /// Test deserialize a LoadDataAction from type Action
        /// </summary>
        [Test]
        public void LoadDataActionDeserializeFromActionTest()
        {
            // TODO uncomment below to test deserialize a LoadDataAction from type Action
            //Assert.IsInstanceOf(typeof(Action), JsonConvert.DeserializeObject<Action>(new LoadDataAction().ToJson()));
        }
        /// <summary>
        /// Test deserialize a InstallAction from type Action
        /// </summary>
        [Test]
        public void InstallActionDeserializeFromActionTest()
        {
            // TODO uncomment below to test deserialize a InstallAction from type Action
            //Assert.IsInstanceOf(typeof(Action), JsonConvert.DeserializeObject<Action>(new InstallAction().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ImportAction from type Action
        /// </summary>
        [Test]
        public void ImportActionDeserializeFromActionTest()
        {
            // TODO uncomment below to test deserialize a ImportAction from type Action
            //Assert.IsInstanceOf(typeof(Action), JsonConvert.DeserializeObject<Action>(new ImportAction().ToJson()));
        }
        /// <summary>
        /// Test deserialize a SetOptionsAction from type Action
        /// </summary>
        [Test]
        public void SetOptionsActionDeserializeFromActionTest()
        {
            // TODO uncomment below to test deserialize a SetOptionsAction from type Action
            //Assert.IsInstanceOf(typeof(Action), JsonConvert.DeserializeObject<Action>(new SetOptionsAction().ToJson()));
        }
        /// <summary>
        /// Test deserialize a UpdateAction from type Action
        /// </summary>
        [Test]
        public void UpdateActionDeserializeFromActionTest()
        {
            // TODO uncomment below to test deserialize a UpdateAction from type Action
            //Assert.IsInstanceOf(typeof(Action), JsonConvert.DeserializeObject<Action>(new UpdateAction().ToJson()));
        }
        /// <summary>
        /// Test deserialize a QueryAction from type Action
        /// </summary>
        [Test]
        public void QueryActionDeserializeFromActionTest()
        {
            // TODO uncomment below to test deserialize a QueryAction from type Action
            //Assert.IsInstanceOf(typeof(Action), JsonConvert.DeserializeObject<Action>(new QueryAction().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ListEdbAction from type Action
        /// </summary>
        [Test]
        public void ListEdbActionDeserializeFromActionTest()
        {
            // TODO uncomment below to test deserialize a ListEdbAction from type Action
            //Assert.IsInstanceOf(typeof(Action), JsonConvert.DeserializeObject<Action>(new ListEdbAction().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ParseAction from type Action
        /// </summary>
        [Test]
        public void ParseActionDeserializeFromActionTest()
        {
            // TODO uncomment below to test deserialize a ParseAction from type Action
            //Assert.IsInstanceOf(typeof(Action), JsonConvert.DeserializeObject<Action>(new ParseAction().ToJson()));
        }

        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Test]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }

    }

}
